<?
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
 * Este arquivo é parte do programa SigaEPT
 *
 * O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
 * termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
 * na versão 2 da Licença.
 *
 * Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
 * uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
 * Pública Geral GNU/GPL em português para maiores detalhes.
 *
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
 * junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
 * www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301, USA
 */

class frmModuloNew extends MForm
{

	function __construct()
    	{
        	parent::__construct('Cadastrar Novo Módulo');
        	$this->EventHandler();
    	}

    	function CreateFields()
    	{
        	global $MIOLO;

        	$aStatus = array("A"=>"Aberto","F"=>"Fechado");	   
        	//$aTurno = array("M"=>"Manhã","T"=>"Tarde","N"=>"Noite");
		$aTurno = array("I"=>"Integral","D"=>"Diurno","N"=>"Noturno");		
        	$curso = $this->manager->getBusiness('rh','capacitacaocurso');
        	$query = $curso->listAll();
   
        	$fields = array(
            		new MSelection('idcurso','','Curso',$query->chunkResult()),
            		new MTextField('modulo','','Número Módulo',4),
            		new MTextField('nome','','Nome',80),
            		new MCalendarField('datainicio','','Data Início','10'),
            		new MCalendarField('datafim','','Data Fim','10'),
            		new MTextField('horainicio','','Hora Início','5','00:00'),
            		new MTextField('horafim','','Hora Fim','5','00:00'),
            		new MTextField('cargahoraria','','Carga Horária'),
            		new MTextField('vagas','','Vagas','3'),
            		new MSelection('turno','','Turno',$aTurno),
            		new MTextField('local','','Local',30),
            		new MTextField('diasemana','','Dias da Semana',40),
            		new MTextField('anosemestre','','Ano.Semestre',10),
            		new MSelection('status','','Status',$aStatus),
            		new MMultiLineField('observacoes','','Observações',20,2,80),
        			);
		
        	$this->SetFields($fields);
        	$this->nome->addAttribute('maxlength','100');
        	$this->modulo->addAttribute('maxlength','3');
        	$this->local->addAttribute('maxlength','100');
        	//$this->horainicio->addAttribute('maxlength','5');
        	//$this->horafim->addAttribute('maxlength','5');
        	$this->datainicio->addAttribute('maxlength','10');
        	$this->datafim->addAttribute('maxlength','10');
        	//$this->vagas->addAttribute('maxlength','3');
        	$this->cargahoraria->addAttribute('maxlength','5');
        	$this->anosemestre->addAttribute('maxlength','6');
        	$this->observacoes->addAttribute('maxlength','200');
		
		$buttons = array(
			new MButton('btnNew','Enviar'),
        			);
		$this->SetButtons($buttons);
		
		$validators = array(
			new MCompareValidator('idcurso','','!=','','s','required',"Campo \"Curso\" deve ser informado."),
			new MRequiredValidator('nome'),
			new MRequiredValidator('datainicio'),
			new MRequiredValidator('datafim'),
		);

		$this->SetValidators($validators);
    	}

    	function btnNew_click()
    	{
		global $MIOLO, $page, $module;

		$k = new MKrono();
        	$data = $this->getData();
		$data->nome = strToUpper($data->nome);
		$dataFim = $this->GetFormValue('datafim');
	        $dataInicio = $this->GetFormValue('datainicio');
		$horaInicio = $this->getFormValue('horainicio');
		$hInicio = explode(':',$horaInicio);
		$horaFim = $this->getFormValue('horafim');
		$hFim = explode(':',$horaFim);
		if (strlen(trim($data->nome)) < '5')
		{
			$this->addError('Informe o nome do Módulo');
		}
            	elseif ( $k->compareDate($dataInicio,">",$dataFim) )
		{
                    $this->addError("Data início não pode ser maior que a Data Fim.");
		}
		elseif(trim(strlen($horaInicio)) != '5')
		{
			$this->addError("Informe a Hora Início no padrão 00:00");
		}
		elseif($horaInicio[2] != ":")
		{
			$this->addError('Informe a Hora Início no padrão 00:00');
		}
		elseif(!is_numeric($hInicio[0]) || !is_numeric($hInicio[1]))
		{
			$this->addError('Informe a Hora Início corretamente utilizando números');
		}
		elseif($hInicio[0] > '23' || $hInicio[1] >'59')
		{
			$this->addError('Informe a Hora Início Corretamente');
		}

		elseif(trim(strlen($horaFim)) != '5')
		{
			$this->addError("Informe a Hora Fim no padrão 00:00");
		}
		elseif($horaFim[2] != ":")
		{
			$this->addError('Informe a Hora Fim no padrão 00:00');
		}
		elseif(!is_numeric($hFim[0]) || !is_numeric($hFim[1]))
		{
			$this->addError('Informe a Hora Fim corretamente utilizando números');
		}
		elseif($hFim[0] > '23' || $hFim[1] >'59')
		{
			$this->addError('Informe a Hora Fim Corretamente');
		}
		elseif(! is_numeric($this->getFormValue('vagas')))
		{
			$this->addError('Informe a quantidade de Vagas');
		}
		elseif($this->getFormValue('vagas') < 0)
		{
			$this->addError('Informe a quantidade de Vagas Corretamente');	
		}
		else
		{
        		$modulo = $MIOLO->getBusiness($module,'capacitacaomodulo');
        		$modulo->modulo = substr('000' . trim($data->modulo),-3);		
			$modulo->SetData($data);

        		try
        		{
            			$modulo->save();
            			$go = $MIOLO->GetActionURL('rh','main:capacitacao:modulos:main',$modulo->idmodulo);
            			$page->Redirect($go);
        		}
        		catch (Exception $e)
        		{
            			$this->AddError($e->GetMessage());
        		}	 
		}		
     	}
 }
?>
