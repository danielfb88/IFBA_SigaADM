<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
* Este arquivo é parte do programa SigaEPT
*
* O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
* termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
* na versão 2 da Licença.
*
* Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
* uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
* Pública Geral GNU/GPL em português para maiores detalhes.
*
* Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
* junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
* www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
* St, Fifth Floor, Boston, MA 02110-1301, USA
*/
?>
<?php
/**
 * @package SIGA
 * @subpackage Biblioteca
 * @author SETEC/MEC
 */



class frmImportacao extends MForm {
	protected $error;
	protected $info;

	private $bussEtiqueta;
	private $bussAutor;
	private $bussEditora;
	private $bussObra;

	function __construct() {
		global $MIOLO, $module;
		parent::__construct('Importação Marc para Livro');
		$this->SetClose($this->manager->GetActionURL('biblioteca', 'main:importacao'));
		$this->EventHandler();

		/*
		 * Excluindo script que insere texto rico ao textarea
		$this->page->AddScript("/tinymce/jscripts/tiny_mce/tiny_mce.js");

		$script = "tinyMCE.init({
				mode : \"textareas\",
				theme : \"simple\",
				});";

		$this->page->AddJsCode($script);
		*/
			
	}

	function CreateFields()
	{
		global $MIOLO,$module;

		$fields = array
		(
				new MultiLineField('txtObraMarc','','Livro', 25, 20,50,null,null),
				//new MTextField('txtObraMarc','','Livro', 250, 200,250,null,null),
		);
		$this->SetFields($fields);

		$buttons = array
		(
				new MButton('btnEnviar','Enviar'),
		);
		$this->SetButtons($buttons);

		// Business
		$this->bussEtiqueta = $MIOLO->GetBusiness($module, 'etiqueta');
		$this->bussAutor = $MIOLO->GetBusiness($module, 'autor');
		$this->bussEditora = $MIOLO->GetBusiness($module, 'editora');
		$this->bussObra = $MIOLO->GetBusiness($module, 'obra');
	}

	/**
	 * @author Daniel Bonfim
	 * @since 05/12/2012
	 *
	 * Divide o código em 3 partes:
	 * 		Líder;
	 *		Diretório;
	 *		Campos de controle variável
	 *
	 * @param String $marc
	 * @return array com informaçoes sobre lider, diretorio e campos do registro.
	 */
	private function separarPartes($marc) {
		// Removendo caractere de quebra-linha
		$marc = str_replace("\r\n", '', $marc);

		$livro = array(
				'lider' => array(),
				'diretorio' => array(),
				'campos' => array()
		);

		/*
		 *  Obtendo lider
		*/
		$lider = substr($marc, 0, 24); // 24 primeiros caracteres, contando com 0
		$livro['lider'] = $this->obterLiderDetalhes($lider);

		/*
		 * Obtendo Diretorio
		*/
		$i = 24;
		$sairLoop = false;
		$nFimDiretorio = 0;

		while($sairLoop == false) {
			$diretorio = $diretorio . $marc[$i];

			if ($marc[$i] == '^') {
				$diretorio = str_replace('^', '', $diretorio);
				$sairLoop = true;
				$nFimDiretorio = $i;
			} else {
				$i++;
			}
		}
		$livro['diretorio'] = $this->obterDiretorioDetalhes($diretorio);

		/*
		 * Obtendo Campos
		*/
		$campos = null;

		for($i = $nFimDiretorio + 1; $i < strlen($marc); $i++) {
			$campos .= $marc[$i];
		}
		$livro['campos'] = $this->obterCamposDetalhes($campos, $livro['diretorio']);


		/**
		 * Verificação de erros
		*/

		// Se o número de caractetes recuperado através do código do diretório for diferente do numero real de caracteres da string completa dos campos variáveis
		if($livro['campos']['numCaracteres_total'] != $livro['campos']['numCaracteresMarcCampos'])
			$this->addError('O código marc é inválido.');

		// Cada campo definido no diretório deve obrigatoriamente ter 12 caracteres. Portanto a soma deles deve ser um número divisível por 12
		if(strlen($diretorio) % 12 != 0)
			$this->addError('Foram encontrados erros no código do Diretório.');

		/*
		 // Número total de caracteres calculados pelo diretório é igual ao total do número de caracteres da soma dos campos ?
		if($livro['campos']['numCaracteres_total'] != $livro['diretorio']['numCaracteres_total'])
			$this->addError('O total do número de caracteres definido no diretório não é igual ao total do número de caracteres encontrado nos campos.');
		*/


		return $livro;
	}

	/**
	 * @author Daniel Bonfim
	 *
	 * Obtem Lider com todos os seus detalhes em um array
	 *
	 * @param unknown $marc
	 * @return multitype:unknown NULL
	 */
	private function obterLiderDetalhes($marcLider) {
		$lider = array();

		$lider['infoCompleta'] = $marcLider;
		$lider['comprimentoLogico'] = substr($marcLider, 0, 5);
		$lider['status'] = $marcLider[5];
		$lider['tipo'] = $marcLider[6];
		$lider['nivelBibliografico'] = $marcLider[7];
		$lider['tipoDeControle'] = $marcLider[8];
		$lider['esquemaCodificacaoCaractere'] = $marcLider[9];
		$lider['contagemIndicadores'] = $marcLider[10];
		$lider['contagemCodigoSubcampo'] = $marcLider[11];
		$lider['enderecoBaseDosDados'] = substr($marcLider, 12, 5);
		$lider['nivelCodificacao'] = $marcLider[17];
		$lider['formaCatalogacaoDescritiva'] = $marcLider[18];
		$lider['exigenciaRegistroVinculado'] = $marcLider[19];
		$lider['extensaoParteTamanhoCampo'] = $marcLider[20];
		$lider['extensaoPartePosicaoCaractereInicio'] = $marcLider[21];
		$lider['extensaoParteDefinidaImplementacao'] = $marcLider[22];
		$lider['indefinido'] = $marcLider[23];

		return $lider;
	}

	/**
	 * @author Daniel Bonfim
	 *
	 * Obtem Diretorio com detalhes em array
	 *
	 * @param unknown $marcDiretorio
	 * @return multitype:
	 */
	private function obterDiretorioDetalhes($marcDiretorio) {
		$diretorioStrLength = strLen($marcDiretorio);

		$arrCampo = null;
		$arrCampo['numCaracteres_total'] = 0;
		$aux = null;

		for($i=0; $i <= $diretorioStrLength; $i++) {

			if($i % 12 == 0 && $i > 0) {
				$campo = null;

				$campo['infoCompleta'] = $aux;
				$campo['tag'] = substr($aux, 0, 3);
				$campo['numCaracteres'] = substr($aux, 3, 4);
				$campo['posicaoNaSequencia'] = substr($aux, 7, 5);

				$arrCampo['numCaracteres_total'] += $campo['numCaracteres'];
				$arrCampo[] = $campo;
				$aux = null;
			}

			$aux .= $marcDiretorio[$i];
		}

		return $arrCampo;
	}

	/**
	 * @author Daniel Bonfim
	 *
	 * Obtem os campos baseado nas informações extraídas do Diretório em forma de array
	 * @param String $marcCampos
	 * @param array $arrDiretorio
	 * @return array
	 */
	private function obterCamposDetalhes($marcCampos, array $arrDiretorio) {
		$numCaracteresMarcCampos = strlen($marcCampos);
		$arrCamposVariaveis = null;
		$arrCamposVariaveis['numCaracteres_total'] = 0;
		// 		$arrCamposVariaveis['infoCompleta'] = $marcCampos;

		for($i = 0; $i < count($arrDiretorio) - 1; $i++) {
			$campoVariavel = null;

			$campoVariavel['infoCompletaCampo'] = substr($marcCampos, $arrDiretorio[$i]['posicaoNaSequencia'], $arrDiretorio[$i]['numCaracteres']);
			$campoVariavel['numCaracteresCampo'] = strlen($campoVariavel['infoCompletaCampo']);
			$arrCamposVariaveis['numCaracteres_total'] += $campoVariavel['numCaracteresCampo'];
			// Retirando o ultimo caractere da contagem
			$arrCamposVariaveis['numCaracteresMarcCampos'] = ($marcCampos[$numCaracteresMarcCampos - 1] == '\\') ? $numCaracteresMarcCampos - 1 : $numCaracteresMarcCampos;

			// Tag
			$campoVariavel['tag'] = $arrDiretorio[$i]['tag'];

			// SubCampo e Conteudo
			$j = 0;

			for($x = 0; $x < strlen($campoVariavel['infoCompletaCampo']); $x++) {

				if($campoVariavel['infoCompletaCampo'][$x] == '$') {
					$campoVariavel['info'][$j]['subCampo'] = null;
					$campoVariavel['info'][$j]['conteudo'] = null;

					$campoVariavel['info'][$j]['subCampo'] = $campoVariavel['infoCompletaCampo'][$x + 1];

					$aux = substr($campoVariavel['infoCompletaCampo'], $x + 2);
					for($q = 0; $q < strlen($aux); $q++) {
						if($aux[$q] == '$' || $aux[$q] == '^')
							break;
							
						$campoVariavel['info'][$j]['conteudo'] .= $aux[$q];
					}

					$j++;
				}
			}

			$arrCamposVariaveis[] = $campoVariavel;
		}

		return $arrCamposVariaveis;
	}

	/**
	 * @author Daniel Bonfim
	 * @since 13-12-2012
	 *
	 * Salva na tabela bt_editora.
	 * Verifica se a editora existe e em caso negativo, salva.
	 *
	 * Salva Editora
	 * @param array $livro
	 * @return Int $idEditora_salva		-	Id da editora salva
	 */
	function salvarEditora(array $livro) {
		global $MIOLO, $module;

		$editora = $this->getInfoEditora($livro);

		$idEditora = $this->bussEditora->getIdByDesc($editora['descricao']);
		$idEditora_salvo = false;

		// Se a editora não estiver cadastrada, insira
		if(!$idEditora) {
			$idEditora = $this->bussEditora->InsertImportacao2($editora['descricao'], $editora['municipio']);
		}

		if($idEditora) {
			$this->info[] = 'Editora '. $editora['descricao'] . ' cadastrada com sucesso!';
		}

		return $idEditora;
	}

	/**
	 * @author Daniel Bonfim
	 * @since 16-12-2012
	 *
	 * Obtém informações da editora
	 *
	 * @param array $livro
	 * @return array
	 */
	function getInfoEditora(array $livro) {
		// TODO: Obter mais informações da editora
		$editora = array(
				'municipio' => null,
				'descricao' => null
		);

		for($i = 0; $i < count($livro['campos']); $i++) {
			// 260 = Edição
			if ($livro['campos'][$i]['tag'] == 260) {

				for($j = 0; $j < count($livro['campos'][$i]['info']); $j++) {
					if ($livro['campos'][$i]['info'][$j]['subCampo'] == 'a') {
						$editora['municipio'] = $livro['campos'][$i]['info'][$j]['conteudo'];

					} else if ($livro['campos'][$i]['info'][$j]['subCampo'] == 'b') {
						$editora['descricao'] = $livro['campos'][$i]['info'][$j]['conteudo'];
					}
				}
			}
		}

		return $editora;
	}

	/**
	 * @author Daniel Bonfim
	 * @since 16-12-2012
	 *
	 * Obtém informações do autor
	 *
	 * @param array $livro
	 * @return array
	 */
	function getInfoAutor(array $livro) {
		// TODO: Obter mais informações do autor
		// Pode ter mais de um autor
		$autor = array(
				array(
						'idetiqueta' => null,
						'tag' => null,
						'subcampo' => null,
						'conteudo' => null
				)
		);

		$k = 0;
		for($i = 0; $i < count($livro['campos']); $i++) {
			// 100 = Entrada Principal - Nome Pessoal
			// 700 = Entrada secundária - Nome pessoal
			if ($livro['campos'][$i]['tag'] == 100 || $livro['campos'][$i]['tag'] == 700) {

				// Obtendo o idEtiqueta
				$autor[$k]['idetiqueta'] = $this->bussEtiqueta->getIdByTag2($livro['campos'][$i]['tag']);
				$autor[$k]['tag'] = $livro['campos'][$i]['tag'];

				for($j = 0; $j < count($livro['campos'][$i]['info']); $j++) {
					$autor[$k]['subcampo'] = $livro['campos'][$i]['info'][$j]['subCampo'];
					$autor[$k]['conteudo'] = $livro['campos'][$i]['info'][$j]['conteudo'];
					$k++;
				}
			}
		}

		return $autor;
	}

	/**
	 * @author Daniel Bonfim
	 * @since 14-12-2012
	 *
	 * Salva na tabela bt_autor.
	 * Verifica se o autor existe e em caso negativo, salva.
	 *
	 * @param array $livro
	 * @return Int $idEditor	-	Id do editor salvo
	 */
	function salvarAutor(array $livro) {
		global $MIOLO, $module;

		$arrIdAutor = false;

		$autor = $this->getInfoAutor($livro);

		// Salvando
		for($i = 0; $i < count($autor); $i++) {
			// Verificando se existem autores com o nome e idEtiqueta informado
			$idAutor = $this->bussAutor->getIdAutorByNomeAndIdEtiqueta($autor[$i]['conteudo'], $autor[$i]['idetiqueta']);

			// Se não encontrar, insira-o
			if(!$idAutor) {
				$idAutor = $this->bussAutor->insertImportacao2(
						$autor[$i]['idetiqueta'],
						$autor[$i]['subcampo'],
						$autor[$i]['conteudo']
				);

				if($idAutor) {
					$arrIdAutor[] = $idAutor;
					$this->info[] = 'Autor '. $autor[$i]['conteudo'] . ' cadastrado com sucesso!';
				}
			}
		}

		return $arrIdAutor;
	}

	/**
	 * @author Daniel Bonfim
	 * @since 16-12-2012
	 *
	 * Salva na tabela bt_obra.
	 * Verifica se a obra existe e em caso negativo, salva.
	 *
	 * @param array $livro
	 * @return number
	 */
	function salvarObra(array $livro) {
		global $MIOLO, $module;

		$obra = $this->getInfoObra($livro);

		// TODO: verifique se o titulo e o subtitulo da obra já existem no banco antes de salvar. Em caso negativo apenas insire o conteudo de $obra. Vou dormir...

		echo '<pre>';
		print_r($obra);
		echo '</pre>';
		die;

	}

	function getInfoObra(array $livro) {
		$obra = array(
				'idobra' => $this->bussObra->GetNextIdObra(),
				'numerodaobra' => $this->bussObra->GetNextNumeroObra(),
				'titulo' => null,
				'subtitulo' => null,
				'edicao' => null,
				'localpublicacao' => null,
				'editora' => null,
				'datapublicacao' => null,
				'idgenero' => null,
				'descfisica' => null,
				'ideditora' => null,
				'idautor' => null,
				'autor' => null
		);

		/**
		 * tag 245 = Titulo
		 * a (titulo)
		 * b (subtitulo)
		 *
		 * Tag 250 = Edição
		 * a (edicao)
		 *
		 * Tag 260 = Imprenta
		 * a (localpublicacao)
		 * b (editora)
		 * c (datapublicacao)
		 *
		 * Tag 902 = Gênero do Material
		 * a (idgenero)
		 *
		 * Tag 300 = Descrição Física
		 * a (descfisica)
		 *
		 * Tag 100 = Entrada Principal - Nome Pessoal (Autor)
		 *
		*/

		for($i = 0; $i < count($livro['campos']); $i++) {

			// Titulo
			if ($livro['campos'][$i]['tag'] == 245) {
				for($j = 0; $j < count($livro['campos'][$i]['info']); $j++) {

					// titulo
					if($livro['campos'][$i]['info'][$j]['subCampo'] == 'a') {
						$obra['titulo'] = $livro['campos'][$i]['info'][$j]['conteudo'];
					}

					// subtitulo
					if($livro['campos'][$i]['info'][$j]['subCampo'] == 'b') {
						$obra['subtitulo'] = $livro['campos'][$i]['info'][$j]['conteudo'];
					}
				}
			}

			// Edição
			if ($livro['campos'][$i]['tag'] == 250) {
				for($j = 0; $j < count($livro['campos'][$i]['info']); $j++) {

					// edição
					if($livro['campos'][$i]['info'][$j]['subCampo'] == 'a') {
						$obra['edicao'] = $livro['campos'][$i]['info'][$j]['conteudo'];
					}
				}
			}

			// Imprenta
			if ($livro['campos'][$i]['tag'] == 260) {
				for($j = 0; $j < count($livro['campos'][$i]['info']); $j++) {

					// localpublicacao
					if($livro['campos'][$i]['info'][$j]['subCampo'] == 'a') {
						$obra['localpublicacao'] = $livro['campos'][$i]['info'][$j]['conteudo'];
					}

					// editora
					if($livro['campos'][$i]['info'][$j]['subCampo'] == 'b') {
						$obra['editora'] = $livro['campos'][$i]['info'][$j]['conteudo'];
						$obra['ideditora'] = $this->bussEditora->getIdByDesc($obra['editora']);
					}

					// datapublicacao
					if($livro['campos'][$i]['info'][$j]['subCampo'] == 'b') {
						$obra['datapublicacao'] = $livro['campos'][$i]['info'][$j]['conteudo'];
					}
				}
			}

			// Gênero do Material
			if ($livro['campos'][$i]['tag'] == 902) {
				for($j = 0; $j < count($livro['campos'][$i]['info']); $j++) {

					// idgenero
					if($livro['campos'][$i]['info'][$j]['subCampo'] == 'a') {
						$obra['idgenero'] = $livro['campos'][$i]['info'][$j]['conteudo'];
					}
				}
			}

			// Descrição Física
			if ($livro['campos'][$i]['tag'] == 300) {
				for($j = 0; $j < count($livro['campos'][$i]['info']); $j++) {

					// descfisica
					if($livro['campos'][$i]['info'][$j]['subCampo'] == 'a') {
						$obra['descfisica'] = $livro['campos'][$i]['info'][$j]['conteudo'];
					}
				}
			}

			// Entrada Principal - Autor
			if ($livro['campos'][$i]['tag'] == 100) {
				for($j = 0; $j < count($livro['campos'][$i]['info']); $j++) {

					// autor
					if($livro['campos'][$i]['info'][$j]['subCampo'] == 'a') {
						$idEtiqueta = $this->bussEtiqueta->getIdByTag2(100);
						$obra['autor'] = $livro['campos'][$i]['info'][$j]['conteudo'];
						$obra['idautor'] = $this->bussAutor->getIdAutorByNomeAndIdEtiqueta($obra['autor'], $idEtiqueta);
					}
				}
			}


		}

		return $obra;
	}

	/**
	 * @author Daniel Bonfim
	 * @since 05/12/2012
	 */
	function btnEnviar_click() {
		global $MIOLO, $module;

		$txtObraMarc = $this->GetFormValue('txtObraMarc');
		$livro = $this->separarPartes($txtObraMarc);

		if(!$this->hasErrors()) {
			$idEditora = $this->salvarEditora($livro);
			$idAutor = $this->salvarAutor($livro);
			$idObra = $this->salvarObra($livro);
		}



		echo '<pre>';
		echo '<br/><br/> ' . $txtObraMarc;
		print_r($livro);
		echo '</pre>';
		die;










		/*
		 //Obtem Livros a serem importados. Inicialmente, não estou considerando a importação de mais de um livro.
		for($indLivros = 0; $indLivros< count($dados->livros);$indLivros++ ){
		$livro = $dados->livros[$indLivros];
		$this->assuntos = array();
		var_export($livro);
		try{
		//Dúvida: Será que existe a necessidade de checagem da existência da Obra.
		//O mero fato de se estar tentando fazer uma importação, torna possível pressupor que a obra ainda não existe?
		$idobra = $this->objObra->criaObraImportacao();
		$etiquetas = array();
		$arrayLivro =  array("titulo"=>NULL,
				"subtitulo"=>NULL,
				"autor"=>NULL,
				"edicao"=>NULL,
				"localdepublicacao"=>NULL,
				"ideditora"=>NULL,
				"datadepublicacao"=>NULL,
				"genero"=>NULL,
				"descfisica"=>NULL);

		for($i=0;$i< count($livro);$i+=3){
		$tag = $livro[$i];
		$indicadores = $livro[$i+1];
		$indicadores = str_replace(' ','',$indicadores);
		$indicador1 = ($indicadores[0]==' ')?NULL:$indicadores[0];
		$indicador2 = ($indicadores[1]==' ')?NULL:$indicadores[1];
		$conteudoOriginal = $livro[$i+2];
		$idetiqueta = $this->objEtiqueta->GetIdByTag($tag);
		$idetiqueta = $idetiqueta->result[0][0];

		array_push($etiquetas,$tag);
		$ocorrencia = 0;
		for ( $j=0; $j<count($etiquetas) ; $j++)
		{
		if ($etiquetas[$j]==$tag) $ocorrencia++;
		}

		$index = 0;

		$tamanhoConteudo = strlen($conteudoOriginal);
		$valor = '';
		$campoVariaveis = false;

		while($index< $tamanhoConteudo){
		if($conteudoOriginal[$index]=='$'){
		$campoVariaveis = true;
		$subcampo = $conteudoOriginal[$index+1];
		$index += 2;
		$valor = '';
		while($conteudoOriginal[$index+1] != '$'){
		$valor .= $conteudoOriginal[$index];
		$index++;
		if($index == $tamanhoConteudo -1){
		$valor .= $conteudoOriginal[$index];
		break;
		}
		}
		$this->ImportaCampos($idobra,$idetiqueta,$tag,$indicador1,$indicador2,$subcampo,$valor,$ocorrencia,$arrayLivro);
		}
		$index++;
		}
		if(!$campoVariaveis){
		$this->ImportaCampos($idobra,$idetiqueta,$tag,$indicador1,$indicador2,$subcampo,$conteudoOriginal,$ocorrencia,$arrayLivro);
		}
		}
		$numerodaobra = $this->objObra->getNumeroByIdobra($idobra)->result[0][0];
		$mensagem = 'Obra '.$titulo.' criada com sucesso com o número '.$numerodaobra;
		$this->info[] = $mensagem;
		}catch(Exception $e){
		$this->erro[] = "Ocorreu um erro na importação dos dados. Verifique se os subcampos foram cadastrados.";
		}
		}
		$this->ExibeErroSucesso();
		$this->SetFieldValue('txtObraMarc','');
		*/
	} // btnEnviar_click

	function ImportaCampos($idobra,$idetiqueta,$tag,$indicador1,$indicador2,$subcampo,$valor,$ocorrencia,&$objReferencia){
		$valor= trim($valor); //esta vindo com um espaç em branco no inicio

		if($tag>'009'){
			switch ($tag){
				case '245':  if ($subcampo=='a') $objReferencia['titulo'] = $valor;
				if ($subcampo=='b') $objReferencia['subtitulo'] = $valor;
				break;
				case '100':  if ($subcampo=='a')
				{
					if ((substr_count($valor,',')==0))
					{
						$auxvalor = explode(",",$valor,2);
						$prenome = $auxvalor[0];
						$nome = $auxvalor[1];
						$consulta = $this->objAutor->GetIdAutorImportacao($prenome,$nome);
					}else
					{
						$auxvalor = explode(", ",$valor,2);
						$prenome = $auxvalor[1];
						$nome = $auxvalor[0];
						$consulta = $this->objAutor->GetIdAutorImportacao($prenome,$nome);
					}
					if ($consulta==NULL)
					{
						$objReferencia['autor'] = $this->objAutor->InsertImportacao($prenome,$nome);
					}else $objReferencia['autor']=$consulta;
				}
				break;
				case '250':  if ($subcampo=='a') $objReferencia['edicao'] = $valor;
				break;
				case '260':  if ($subcampo=='a') $objReferencia['localdepublicacao'] = $valor;
				if ($subcampo=='b')
				{
					$objReferencia['ideditora'] = $this->objEditora->getIdByDesc($valor);
					if ($objReferencia['ideditora']==NULL)
					{
						$objReferencia['ideditora'] = $this->objEditora->InsertImportacao($valor);
					}
				}
				if ($subcampo=='c') $objReferencia['datadepublicacao'] = $valor;
				break;
				case '902':  if ($subcampo=='a') {//em genero é salvo o id do genero

					$valor = $this->objGenero->getIdByDescricao($valor);
					$objReferencia['genero'] = $valor;
					//var_dump($valor);
				}
				break;
				case '300':  if ($subcampo=='a') $objReferencia['descfisica'] = $valor;
				break;
			}
			if (($tag>='600')and($tag<'699'))
			{
				array_push($this->assuntos,array($subcampo,$valor));
			}

			$this->objObra->saveMaterialImportacao($idobra,$idetiqueta,$subcampo,$valor,$ocorrencia);


			if ($assuntos<>NULL)
			{
				$controle = $this->objAssunto->importacaoAssunto($assuntos,$tag);
				if ($controle==FALSE)
				{
					$idetiqueta = $this->objEtiqueta->GetIdByTag($tag)->result[0][0];
					$ocorrenciaAssunto = $this->objAssunto->GetLastNumAssunto($idetiqueta)+1;
					for ($x=0 ; $x<count($assuntos) ; $x++)
					{
						$idassunto = $this->objAssunto->InsertImportacao($idetiqueta, $assuntos[$x][0],$assuntos[$x][1],1,$ocorrenciaAssunto, NULL);
					}
					if ($indicadorAssunto1<>NULL) $this->objAssunto->saveIndicador($idetiqueta, NULL,$indicador1,1,$ocorrenciaAssunto, NULL ,1);
					if ($indicadorAssunto2<>NULL) $this->objAssunto->saveIndicador($idetiqueta, NULL,$indicador2,1,$ocorrenciaAssunto, NULL ,2);
					$this->objAssunto->saveAssuntoObra($idassunto,$idobra,$ocorrencia,$idetiqueta);
				}
				else
				{
					$idetiqueta = $this->objEtiqueta->GetIdByTag($tag)->result[0][0];
					$idassunto = $this->objAssunto->getIdAssuntoAtualizado($idetiqueta, $controle);
					$this->objAssunto->saveAssuntoObra($idassunto,$idobra,$ocorrencia,$idetiqueta);
				}
			}

			if ($indicador1!=NULL)     $this->objObra->saveIndicadorImportacao($idobra,$idetiqueta,$ocorrencia,1,$indicador1);
			if ($indicador2!=NULL)     $this->objObra->saveIndicadorImportacao($idobra,$idetiqueta,$ocorrencia,2,$indicador2);
		}else{
			$this->objObra->saveCamposFixosImportacao($idobra,$idetiqueta,$valor);
		}
		$this->objObra->atualizaObraImportacao ($idobra,$objReferencia["titulo"],$objReferencia["subtitulo"],$objReferencia["autor"],
				$objReferencia["edicao"],$objReferencia["localdepublicacao"],$objReferencia["ideditora"],
				$objReferencia["datadepublicacao"],$objReferencia["genero"],$objReferencia["descfisica"]);
	}

	function GetData()
	{
		$data = new FormData();
		$data->livros = $this->getLivrosFromTabela($this->GetFormValue('txtObraMarc'));
		return $data;
	}

	function getLivrosFromTabela($tabela){
		$conjLivros = array();
		$auxLivros = explode("</table>",$tabela);
		for($i=0;$i<(count($auxLivros)-1);$i++){
			$alivro = $auxLivros[$i];
			$alivro = str_replace('</th>',"$$",$alivro);
			$alivro = str_replace('</td>',"$$",$alivro);
			$alivro = str_replace('__',"$$",$alivro);
			$alivro = str_replace('|',"$",$alivro);
			$alivro = str_replace(array('&nbsp;',"\t"),' ',$alivro);
			$alivro = strip_tags($alivro);
			$livro = explode("$$",$alivro);
			$first = substr(trim($livro[0]),-30);
			$livro[0] = $first;
			for($j=1; $j < count($livro);$j++){
                $aux = trim($livro[$j]);
                $livro[$j] = $aux;
            }
            array_pop($livro);
            array_push($conjLivros, $livro);
		}
		return $conjLivros;
	}

	function ExibeErroSucesso(){
        if ( count($this->erro) > 0 )
        {
        	foreach ( $this->erro as $e )
        	{
        		$this->addError($e);
        	}
        }
        if ( count($this->info) > 0 )
        {
        	foreach ( $this->info as $i )
        	{
        		$this->addInfo($i);
        	}
        }
    }
}
?>
