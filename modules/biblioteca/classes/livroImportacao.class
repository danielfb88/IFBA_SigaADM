<?php
/* Copyright 2006, 2007, 2008, 2009, 2010 do SETEC/MEC
 *
* Este arquivo é parte do programa SigaEPT
*
* O SigaEPT é um software livre;  você pode redistribuí-lo e/ou modificá-lo dentro dos
* termos da Licença Pública Geral GNU como publicada pela fundação do software livre (FSF);
* na versão 2 da Licença.
*
* Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem
* uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja Licença
* Pública Geral GNU/GPL em português para maiores detalhes.
*
* Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título “LICENCA.txt”,
* junto com este programa, se não, acesse o portal do Software Público Brasileiro no endereço
* www.softwarepublico.gov.br ou escreva para Fundação do Software Livre (FSF) Inc.,51 Franklin
* St, Fifth Floor, Boston, MA 02110-1301, USA
*/
?>
<?php
/**
 * @author Daniel Bonfim
 * @since 02/12/2012
 */

class BusinessBibliotecaLivroImportacao extends Business {
	private $marc;
	private $livro;

	private $nFimDiretorio;

	private $bussEtiqueta;
	private $bussAutor;
	private $bussEditora;
	private $bussObra;

	private $info;

	function BusinessBibliotecaLivroImportacao( $data = null ) {
		global $MIOLO;

		$this->Business( 'sigaept', $data );

		$this->bussEtiqueta = $MIOLO->GetBusiness('biblioteca', 'etiqueta');
		$this->bussAutor = $MIOLO->GetBusiness('biblioteca', 'autor');
		$this->bussEditora = $MIOLO->GetBusiness('biblioteca', 'editora');
		$this->bussObra = $MIOLO->GetBusiness('biblioteca', 'obra');
	}

	/**
	 * Define código marc a ser trabalhado.
	 *
	 * @param String $marc
	 * @throws Exception
	 */
	public function setMarc($marc) {
		if (!is_null($marc) && !empty($marc)) {
			// Removendo caractere de quebra-linha
			$this->marc = str_replace("\r\n", '', trim($marc));
			// Organizando informações
			$this->livro = $this->separarPartesDoMarc($this->marc);

		} else {
			throw new EMarcException('Código marc nulo ou vazio.');
		}
	}

	/**
	 * Retorna o array do com as informações do livro
	 * @return array
	 */
	public function getLivro() {
		if(!$this->marc) {
			throw new EMarcException('O código marc não foi definido.');

		} else {
			return $this->livro;
		}
	}

	/**
	 * Retorna Informações sobre operações realizadas.
	 */
	public function getInfo() {
		return $this->info;
	}

	/**
	 * Separa o código marc em 3 partes:
	 * 		- lider
	 * 		- diretorio
	 * 		- campos
	 *
	 * @return array
	 */
	private function separarPartesDoMarc($marc) {

		$livro['lider'] = $this->getLider($marc);
		$livro['diretorio'] = $this->getDiretorio($marc);
		$livro['campos'] = $this->getCamposVariaveis($marc, $this->nFimDiretorio);

		/**
		 * Verificação de erros
		*/

		// Se o número de caractetes recuperado através do código do diretório for diferente do numero real de caracteres da string completa dos campos variáveis
		if($livro['campos']['numCaracteres_total'] != $livro['campos']['numCaracteresMarcCampos'])
			throw new EMarcException('O código marc é inválido.');

		// Cada campo definido no diretório deve obrigatoriamente ter 12 caracteres. Portanto a soma deles deve ser um número divisível por 12
		if(strlen($diretorio) % 12 != 0)
			throw new EMarcException('Foram encontrados erros no código do Diretório.');

		return $livro;
	}

	/**
	 * Obtem o código do lider do código do marc.
	 * O código do Lider são os 24 primeiros caracteres contando com o 0 "zero"
	 *
	 * @param String $marc
	 */
	private function getLider($marc) {
		$marcLider = substr($marc, 0, 24);

		$lider['infoCompleta'] = $marcLider;
		$lider['comprimentoLogico'] = substr($marcLider, 0, 5);
		$lider['status'] = $marcLider[5];
		$lider['tipo'] = $marcLider[6];
		$lider['nivelBibliografico'] = $marcLider[7];
		$lider['tipoDeControle'] = $marcLider[8];
		$lider['esquemaCodificacaoCaractere'] = $marcLider[9];
		$lider['contagemIndicadores'] = $marcLider[10];
		$lider['contagemCodigoSubcampo'] = $marcLider[11];
		$lider['enderecoBaseDosDados'] = substr($marcLider, 12, 5);
		$lider['nivelCodificacao'] = $marcLider[17];
		$lider['formaCatalogacaoDescritiva'] = $marcLider[18];
		$lider['exigenciaRegistroVinculado'] = $marcLider[19];
		$lider['extensaoParteTamanhoCampo'] = $marcLider[20];
		$lider['extensaoPartePosicaoCaractereInicio'] = $marcLider[21];
		$lider['extensaoParteDefinidaImplementacao'] = $marcLider[22];
		$lider['indefinido'] = $marcLider[23];

		return $lider;
	}

	/**
	 * Obtém o código do diretório do código do marc.
	 * @param String $marc
	 */
	private function getDiretorio($marc) {
		$i = 24;
		$sairLoop = false;
		$marcDiretorio = null;
		$this->nFimDiretorio = 0;

		// Obtendo o marcDiretorio
		while($sairLoop == false) {
			$marcDiretorio .= $marc[$i];

			if ($marc[$i] == '^') {
				$marcDiretorio = str_replace('^', '', $marcDiretorio);
				$sairLoop = true;
				$this->nFimDiretorio = $i;
			} else {
				$i++;
			}
		}

		// numero de caracteres do marcDiretorio
		$marcDiretorioStrLength = strLen($marcDiretorio);

		$arrCampo = null;
		$arrCampo['numCaracteres_total'] = 0;
		$aux = null;

		for($i=0; $i <= $marcDiretorioStrLength; $i++) {

			if($i % 12 == 0 && $i > 0) {
				$campo = null;

				$campo['infoCompleta'] = $aux;
				$campo['tag'] = substr($aux, 0, 3);
				$campo['numCaracteres'] = substr($aux, 3, 4);
				$campo['posicaoNaSequencia'] = substr($aux, 7, 5);

				$arrCampo['numCaracteres_total'] += $campo['numCaracteres'];
				$arrCampo[] = $campo;
				$aux = null;
			}

			$aux .= $marcDiretorio[$i];
		}

		return $arrCampo;
	}

	/**
	 * Obtém informações da editora
	 * @return array
	 */
	public function getEditora() {
		if($this->livro && $this->marc) {

			$editora = array(
					'municipio' => null,
					'descricao' => null
			);

			for($i = 0; $i < count($this->livro['campos']); $i++) {

				// 260 = Edição
				if ($this->livro['campos'][$i]['tag'] == 260) {

					for($j = 0; $j < count($this->livro['campos'][$i]['info']); $j++) {
						if ($this->livro['campos'][$i]['info'][$j]['subCampo'] == 'a') {
							$editora['municipio'] = $this->livro['campos'][$i]['info'][$j]['conteudo'];

						} else if ($this->livro['campos'][$i]['info'][$j]['subCampo'] == 'b') {
							$editora['descricao'] = $this->livro['campos'][$i]['info'][$j]['conteudo'];
						}
					}
				}
			}

			return $editora;

		} else {
			throw new EMarcException('O marc não foi inserido.');
		}
	}

	/**
	 * Salva na tabela bt_editora.
	 * Verifica se a editora existe e em caso negativo, salva.
	 *
	 */
	public function salvarEditora() {
		$editora = $this->getEditora();

		// Verificando se a editora existe
		$idEditora = $this->bussEditora->getIdByDesc($editora['descricao']);

		// Se a editora não estiver cadastrada, insira
		if(!$idEditora) {
			$idEditora = $this->bussEditora->InsertImportacao2($editora['descricao'], $editora['municipio']);

			if($idEditora)
				$this->info[] = 'Editora '. $editora['descricao'] . ' cadastrada com sucesso!';

		}

		return $idEditora;
	}

	/**
	 * Obtém informações do Autor
	 * @return array
	 */
	public function getAutor() {
		if($this->livro && $this->marc) {

			// Pode ter mais de um autor
			$autor = array(
					array(
							'idetiqueta' => null,
							'tag' => null,
							'subcampo' => null,
							'conteudo' => null
					)
			);

			$k = 0;
			for($i = 0; $i < count($this->livro['campos']); $i++) {

				// 100 = Entrada Principal - Nome Pessoal
				// 700 = Entrada secundária - Nome pessoal
				if (isset($this->livro['campos'][$i]['tag'])) {
					if ($this->livro['campos'][$i]['tag'] == 100 || $this->livro['campos'][$i]['tag'] == 700) {

						// Obtendo o idEtiqueta
						$autor[$k]['idetiqueta'] = $this->bussEtiqueta->getIdByTag2($this->livro['campos'][$i]['tag']);
						$autor[$k]['tag'] = $this->livro['campos'][$i]['tag'];

						for($j = 0; $j < count($this->livro['campos'][$i]['info']); $j++) {
							$autor[$k]['subcampo'] = $this->livro['campos'][$i]['info'][$j]['subCampo'];
							$autor[$k]['conteudo'] = $this->livro['campos'][$i]['info'][$j]['conteudo'];
							$k++;
						}
					}
				}
			}

			return $autor;

		} else {
			throw new EMarcException('O marc não foi inserido.');
		}
	}

	/**
	 * Salva na tabela bt_autor.
	 * Verifica se o autor existe e em caso negativo, salva.
	 *
	 */
	public function salvarAutor() {
		$arrIdAutor = false;

		$autor = $this->getAutor();

		// Salvando
		for($i = 0; $i < count($autor); $i++) {
			// Verificando se existem autores com o nome e idEtiqueta informado
			$idAutor = $this->bussAutor->getIdAutorByNomeAndIdEtiqueta($autor[$i]['conteudo'], $autor[$i]['idetiqueta']);

			// Se não encontrar, insira-o
			if(!$idAutor) {
				$idAutor = $this->bussAutor->insertImportacao2(
						$autor[$i]['idetiqueta'],
						$autor[$i]['subcampo'],
						$autor[$i]['conteudo']
				);

				if($idAutor) {
					$arrIdAutor[] = $idAutor;
					$this->info[] = 'Autor '. $autor[$i]['conteudo'] . ' cadastrado com sucesso!';
				}

			}
		}

		return $arrIdAutor;
	}

	/**
	 * Salva Lider na tabela bt_camposfixos. Idetiqueta = 1 (tag 000)
	 *
	 */
	private function inserirLider(array $lider, $idObra) {
		$conteudo = $lider['infoCompleta'];

		$sql = new sql('idetiqueta, idobra, conteudo', 'bt_camposfixos');
		$values = array(1, $idObra, $conteudo);

		return $this->Execute($sql->Insert($values));
	}

	/**
	 * Retorna o código dos Campos Fixos de Dados. Tag 008, idtiqueta = 7
	 * // TODO: DESCOBRIR PORQUE ESTÁ RETORNANDO 41
	 */
	private function getCamposFixos() {
		$camposFixos = null;

		for($i = 0; $i < count($this->livro['campos']) - 2; $i++) {

			if (isset($this->livro['campos'][$i]['tag'])) {
				if($this->livro['campos'][$i]['tag'] == '008') {
					$camposFixos = $this->livro['campos'][$i]['numCaracteresCampo'];
				}
			}
		}

		return $camposFixos;
	}

	/**
	 * Salva Campos Fisicos na tabela bt_camposfixos. Idetiqueta = 7 (tag 008)
	 * @param string $camposFixos
	 * @param int $idObra
	 */
	private function inserirCamposFixos($camposFixos, $idObra) {
		var_dump($camposFixos);
		die;

		$conteudo = $camposFixos;

		$sql = new sql('idetiqueta, idobra, conteudo', 'bt_camposfixos');
		$values = array(7, $idObra, $conteudo);

		return $this->Execute($sql->Insert($values));
	}

	/**
	 * Salva na tabela bt_obra.
	 * Verifica se a obra existe e em caso negativo, salva.
	 */
	function salvarObra() {
		$obra = $this->getObra();

		$idObra = $this->bussObra->getIdByTituloAndSubtitulo($obra['titulo'], $obra['subtitulo']);

		// Se a editora não estiver cadastrada, insira
		if(!$idObra) {
			// TODO: INICIAR TRANSAÇÃO AQUI - PRIORIDADE MAXIMA. vou dormir...
			$idObra = $this->bussObra->inserirObra($obra);

			// Se a obra for inserida corretamente
			if($idObra) {
				// Salve o lider
				$statusLider = $this->inserirLider($this->getLider($this->marc), $idObra);
				$camposFixos = $this->inserirCamposFixos($this->getCamposFixos(), $idObra);


				// TODO: FINALIZAR TRANSACAO AQUI
				$this->info[] = 'Obra \''. $obra['titulo'] . ' - ' . $obra['subtitulo'] . '\' cadastrada com sucesso!';
			}
		}

		return $idObra;
	}

	/**
	 * Obtém informações da Obra
	 *
	 * tag 245 = Titulo
	 * a (titulo)
	 * b (subtitulo)
	 *
	 * Tag 250 = Edição
	 * a (edicao)
	 *
	 * Tag 260 = Imprenta
	 * a (localpublicacao)
	 * b (editora)
	 * c (datapublicacao)
	 *
	 * Tag 902 = Gênero do Material
	 * a (idgenero)
	 *
	 * Tag 300 = Descrição Física
	 * a (descfisica)
	 *
	 * Tag 100 = Entrada Principal - Nome Pessoal (Autor)
	 *
	 * @return array
	 */
	public function getObra() {
		if($this->livro && $this->marc) {

			$obra = array(
					'idobra' => $this->bussObra->GetNextIdObra(),
					'numerodaobra' => $this->bussObra->GetNextNumeroObra(),
					'titulo' => null,
					'subtitulo' => null,
					'edicao' => null,
					'localpublicacao' => null,
					'editora' => null,
					'datapublicacao' => null,
					'idgenero' => null,
					'descfisica' => null,
					'ideditora' => null,
					'idautor' => null,
					'autor' => null
			);

			for($i = 0; $i < count($this->livro['campos']); $i++) {

				if (isset($this->livro['campos'][$i]['tag'])) {
					switch($this->livro['campos'][$i]['tag']) {

						// Titulo
						case 245:
							for($j = 0; $j < count($this->livro['campos'][$i]['info']); $j++) {

								// titulo
								if($this->livro['campos'][$i]['info'][$j]['subCampo'] == 'a') {
									$obra['titulo'] = $this->livro['campos'][$i]['info'][$j]['conteudo'];
								}

								// subtitulo
								if($this->livro['campos'][$i]['info'][$j]['subCampo'] == 'b') {
									$obra['subtitulo'] = $this->livro['campos'][$i]['info'][$j]['conteudo'];
								}
							}
							break;

							// Edição
						case 250:
							for($j = 0; $j < count($this->livro['campos'][$i]['info']); $j++) {

								// edição
								if($this->livro['campos'][$i]['info'][$j]['subCampo'] == 'a') {
									$obra['edicao'] = $this->livro['campos'][$i]['info'][$j]['conteudo'];
								}
							}
							break;

							// Imprenta
						case 260:
							for($j = 0; $j < count($this->livro['campos'][$i]['info']); $j++) {

								// localpublicacao
								if($this->livro['campos'][$i]['info'][$j]['subCampo'] == 'a') {
									$obra['localpublicacao'] = $this->livro['campos'][$i]['info'][$j]['conteudo'];
								}

								// editora
								if($this->livro['campos'][$i]['info'][$j]['subCampo'] == 'b') {
									$obra['editora'] = $this->livro['campos'][$i]['info'][$j]['conteudo'];
									$obra['ideditora'] = $this->bussEditora->getIdByDesc($obra['editora']);
								}

								// datapublicacao
								if($this->livro['campos'][$i]['info'][$j]['subCampo'] == 'c') {
									$obra['datapublicacao'] = $this->livro['campos'][$i]['info'][$j]['conteudo'];
								}
							}
							break;

							// Gênero do Material
						case 902:
							for($j = 0; $j < count($this->livro['campos'][$i]['info']); $j++) {

								// idgenero
								if($this->livro['campos'][$i]['info'][$j]['subCampo'] == 'a') {
									$obra['idgenero'] = $this->livro['campos'][$i]['info'][$j]['conteudo'];
								}
							}
							break;

							// Descrição Física
						case 300:
							for($j = 0; $j < count($this->livro['campos'][$i]['info']); $j++) {

								// descfisica
								if($this->livro['campos'][$i]['info'][$j]['subCampo'] == 'a') {
									$obra['descfisica'] = $this->livro['campos'][$i]['info'][$j]['conteudo'];
								}
							}
							break;

							// Entrada Principal - Autor
						case 100:
							for($j = 0; $j < count($this->livro['campos'][$i]['info']); $j++) {

								// autor
								if($this->livro['campos'][$i]['info'][$j]['subCampo'] == 'a') {
									$idEtiqueta = $this->bussEtiqueta->getIdByTag2(100);
									$obra['autor'] = $this->livro['campos'][$i]['info'][$j]['conteudo'];
									$obra['idautor'] = $this->bussAutor->getIdAutorByNomeAndIdEtiqueta($obra['autor'], $idEtiqueta);
								}
							}
							break;
					}
				}
			}

			return $obra;

		} else {
			throw new EMarcException('O marc não foi inserido.');
		}
	}

	/**
	 * Verifica se existe registro com as informações definidas nos parâmetros.
	 * Tabela bt_camposfixos
	 *
	 * @param int $idEtiqueta
	 * @param int $idObra
	 * @param string $conteudo
	 */
	private function existeCampoFixo($idEtiqueta, $idObra, $conteudo) {
		$sql = new sql('idobra','bt_camposfixos','(idetiqueta = ?) AND (idobra = ?) AND (conteudo = ?)');

		$query = $this->Query($sql,array($idEtiqueta, $idObra, $conteudo));
		return is_null($query->result[0][0]);
	}

	/**
	 * TODO: Os subcampos vão para bt_material
	 */
	public function salvarMaterial() {

	}


	// TODO: Analizar se deve salvar algo em bt_indicador.

	/**
	 * Obtém o código dos campos variáveis atravéz do código do marc e do número que informa qual o index do ultimo
	 * caracter do diretório
	 *
	 * @param String $marc
	 * @param Integer $nFimDiretorio
	 */
	private function getCamposVariaveis($marc, $nFimDiretorio) {
		$marcCampos = null;

		// Obtendo o marcCampos
		for($i = $nFimDiretorio + 1; $i < strlen($marc); $i++) {
			$marcCampos .= $marc[$i];
		}

		$numCaracteresMarcCampos = strlen($marcCampos);
		$arrCamposVariaveis = null;

		$arrCamposVariaveis['numCaracteres_total'] = 0;
		$arrDiretorio = $this->getDiretorio($marc);

		for($i = 0; $i < count($arrDiretorio) - 1; $i++) {
			$campoVariavel = null;

			$campoVariavel['infoCompletaCampo'] = substr($marcCampos, $arrDiretorio[$i]['posicaoNaSequencia'], $arrDiretorio[$i]['numCaracteres']);
			$campoVariavel['numCaracteresCampo'] = strlen($campoVariavel['infoCompletaCampo']);
			$arrCamposVariaveis['numCaracteres_total'] += $campoVariavel['numCaracteresCampo'];
			// Retirando o ultimo caractere da contagem
			$arrCamposVariaveis['numCaracteresMarcCampos'] = ($marcCampos[$numCaracteresMarcCampos - 1] == '\\') ? $numCaracteresMarcCampos - 1 : $numCaracteresMarcCampos;

			// Tag
			$campoVariavel['tag'] = $arrDiretorio[$i]['tag'];

			// SubCampo e Conteudo
			$j = 0;

			for($x = 0; $x < strlen($campoVariavel['infoCompletaCampo']); $x++) {

				if($campoVariavel['infoCompletaCampo'][$x] == '$') {
					$campoVariavel['info'][$j]['subCampo'] = null;
					$campoVariavel['info'][$j]['conteudo'] = null;

					$campoVariavel['info'][$j]['subCampo'] = $campoVariavel['infoCompletaCampo'][$x + 1];

					$aux = substr($campoVariavel['infoCompletaCampo'], $x + 2);
					for($q = 0; $q < strlen($aux); $q++) {
						if($aux[$q] == '$' || $aux[$q] == '^')
							break;
							
						$campoVariavel['info'][$j]['conteudo'] .= $aux[$q];
					}

					$j++;
				}
			}

			$arrCamposVariaveis[] = $campoVariavel;
		}

		return $arrCamposVariaveis;
	}

}

?>
